using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks; // Still needed for Splitting.ReadFromFile
using MalWareDetection.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace MalWareDetection.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class MainController : ControllerBase
    {
        private readonly AppDbContext context;
        private static int cnt = 1;

        public MainController(AppDbContext con)
        {
            context = con;
        }

        [HttpPost("ReadFromLocalFile")]
        public IActionResult ReadFromFile(string filePath)
        {
            Console.WriteLine($"File Path is =  {filePath}");
            var res = Splitting.ReadFromFile(filePath); // Assuming this remains synchronous

            if (res == null)
            {
                return BadRequest("No content");
            }

            Filles f = new Filles { Name = $"File {cnt}" };
            cnt++;
            context.Files.Add(f);
            context.SaveChanges(); // Blocking call, consider alternatives

            foreach (var item in res)
            {
                context.HashValues.Add(new HashValue { Value = item, FileId = f.Id });
            }

            context.SaveChanges(); // Blocking call, consider alternatives

            return Ok(res);
        }

        [HttpPost("uploadTextFile")]
        public IActionResult UploadTextFile(IFormFile file)
        {

            if (file == null || file.Length == 0)
            {
                return BadRequest("No file uploaded");
            }

            if (!file.ContentType.Equals("text/plain"))
            {
                return BadRequest("Only plain text files are allowed");
            }

            // Process the uploaded file
            List<string> textLines = new List<string>();
            using (var streamReader = new StreamReader(file.OpenReadStream()))
            {
                string line;
                while ((line = streamReader.ReadLine()) != null)  
                {
                    textLines.Add(line);
                }
            }

            string text = "";
            foreach (string line in textLines)
            {
                text += line + " ";
            }

            var AddFile = new Filles { Name = $"File {cnt}" };
            context.Files.Add(AddFile);
            context.SaveChanges();  

            var words = Splitting.SplitTheDate(text);
            foreach (var word in words)
            {
                context.HashValues.Add(new HashValue { Value = word, FileId = AddFile.Id });
            }

            context.SaveChanges();  

            cnt++;
            return Ok(words);
        }

        [HttpGet("Search")]
        public IActionResult SearchforHashValue(string val)
        {
            var res = context.HashValues.FirstOrDefault(e => e.Value == val);

            if (res == null)
            {
                return Ok("The File is Safe ^_^ ");
            }

            return Ok("The File Contains Malware");
        }

        [HttpDelete("{id}")]
        public IActionResult RemoveFile(int id)
        {
            var res = context.Files.Find(id);

            if (res == null)
            {
                return NotFound("No Such File is exist");
            }

            context.Files.Remove(res);
            context.SaveChanges();  

            return Ok("Deleted Succfully");
        }
    }
}
